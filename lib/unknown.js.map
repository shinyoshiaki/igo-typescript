{"version":3,"file":"unknown.js","sourceRoot":"","sources":["../src/unknown.ts"],"names":[],"mappings":";;AAGA;IAEE,iBAAmB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;QACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;IAChD,CAAC;IACD,wBAAM,GAAN,UAAO,IAAY,EAAE,KAAa,EAAE,IAAa,EAAE,QAAa;QAC9D,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,IAAM,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACjC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAS,CAAC;QAEd,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACrC,OAAO;SACR;QAED,IAAM,OAAO,GAAG,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC;QACtC,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;QAClD,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC9B,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACtE,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC7D,OAAO;aACR;SACF;QAED,IAAI,EAAE,CAAC,KAAK,IAAI,KAAK,GAAG,MAAM,EAAE;YAC9B,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;oBACvC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;oBAClE,OAAO;iBACR;aACF;YACD,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,GAAG,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SACxE;IACH,CAAC;IACH,cAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,0BAAO","sourcesContent":["import { CharCategory } from \"./charcategory\";\nimport { WordDic } from \"./worddic\";\n\nexport class Unknown {\n  spaceId: number;\n  constructor(public category: CharCategory) {\n    this.spaceId = this.category.category(\" \").id;\n  }\n  search(text: string, start: number, wdic: WordDic, callback: any) {\n    const category = this.category;\n    const ch = text[start];\n    const ct = category.category(ch);\n    const length = text.length;\n    let i: number;\n\n    if (!callback.isEmpty() && !ct.invoke) {\n      return;\n    }\n\n    const isSpace = ct.id == this.spaceId;\n    const limit = Math.min(length, ct.length + start);\n    for (i = start; i < limit; i++) {\n      wdic.searchFromTrieId(ct.id, start, i - start + 1, isSpace, callback);\n      if (i + 1 != limit && !category.isCompatible(ch, text[i + 1])) {\n        return;\n      }\n    }\n\n    if (ct.group && limit < length) {\n      for (i = limit; i < length; i++) {\n        if (!category.isCompatible(ch, text[i])) {\n          wdic.searchFromTrieId(ct.id, start, i - start, isSpace, callback);\n          return;\n        }\n      }\n      wdic.searchFromTrieId(ct.id, start, length - start, isSpace, callback);\n    }\n  }\n}\n"]}