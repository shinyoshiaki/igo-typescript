{"version":3,"file":"matrix.js","sourceRoot":"","sources":["../src/matrix.ts"],"names":[],"mappings":";;AAAA,+BAAuD;AAEvD;IAIE,gBAAY,MAAkB,EAAE,SAAe;QAC7C,IAAM,IAAI,GAAG,IAAI,wBAAiB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;IAED,yBAAQ,GAAR,UAAS,MAAc,EAAE,OAAe;QACtC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC;IAC3D,CAAC;IACH,aAAC;AAAD,CAAC,AAdD,IAcC;AAdY,wBAAM","sourcesContent":["import { ArrayBufferStream, ShortArray } from \"./util\";\n\nexport class Matrix {\n  leftSize: number;\n  rightSize: number;\n  matrix: ShortArray;\n  constructor(buffer: Uint8Array, bigendian?: any) {\n    const fmis = new ArrayBufferStream(buffer, bigendian);\n    this.leftSize = fmis.getInt();\n    this.rightSize = fmis.getInt();\n    this.matrix = fmis.getShortArray(this.leftSize * this.rightSize);\n  }\n\n  linkCost(leftId: number, rightId: number) {\n    return this.matrix.get(rightId * this.leftSize + leftId);\n  }\n}\n"]}