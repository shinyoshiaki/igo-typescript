{"version":3,"file":"keystream.js","sourceRoot":"","sources":["../src/keystream.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAE9B;IAIE,mBAAY,GAAW,EAAE,KAAc;QACrC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;QACb,IAAI,CAAC,GAAG,GAAG,KAAK,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IACxB,CAAC;IAEM,iBAAO,GAAd,UAAe,GAAc,EAAE,GAAc;QAC3C,IAAM,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACzB,IAAM,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,KAAK,GAAG,KAAK;YAAE,OAAO,CAAC,CAAC,CAAC;aACxB,IAAI,KAAK,GAAG,KAAK;YAAE,OAAO,CAAC,CAAC;;YAC5B,OAAO,CAAC,CAAC;IAChB,CAAC;IAED,8BAAU,GAAV,UAAW,MAAc,EAAE,GAAW,EAAE,MAAc;QACpD,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACrB,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACjB,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM,EAAE;YAC3B,OAAO,KAAK,CAAC;SACd;QACD,OAAO,CACL,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,GAAG,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,GAAG,MAAM,CAAC,CACtE,CAAC;IACJ,CAAC;IAED,wBAAI,GAAJ;QACE,OAAO,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAED,wBAAI,GAAJ;QACE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;YACd,OAAO,WAAI,CAAC,IAAI,CAAC,cAAc,CAAC;SACjC;aAAM;YACL,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;YACnB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YACd,OAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACzB;IACH,CAAC;IAED,uBAAG,GAAH;QACE,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC;IAC9B,CAAC;IACH,gBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,8BAAS","sourcesContent":["import { Node } from \"./node\";\n\nexport class KeyStream {\n  s: string;\n  cur: number;\n  len: number;\n  constructor(key: string, start?: number) {\n    this.s = key;\n    this.cur = start || 0;\n    this.len = key.length;\n  }\n\n  static compare(ks1: KeyStream, ks2: KeyStream) {\n    const rest1 = ks1.rest();\n    const rest2 = ks2.rest();\n    if (rest1 < rest2) return -1;\n    else if (rest1 > rest2) return 1;\n    else return 0;\n  }\n\n  startsWith(prefix: string, beg: number, length: number) {\n    const cur = this.cur;\n    const s = this.s;\n    if (this.len - cur < length) {\n      return false;\n    }\n    return (\n      s.substring(cur, cur + length) == prefix.substring(beg, beg + length)\n    );\n  }\n\n  rest() {\n    return this.s.substring(this.cur);\n  }\n\n  read() {\n    if (this.eos()) {\n      return Node.Chck.TERMINATE_CHAR;\n    } else {\n      const p = this.cur;\n      this.cur += 1;\n      return this.s.charAt(p);\n    }\n  }\n\n  eos() {\n    return this.cur == this.len;\n  }\n}\n"]}