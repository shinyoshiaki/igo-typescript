{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["export class IntArray {\n  length: number;\n  constructor(\n    public buffer: Uint8Array,\n    public pos: number,\n    public elementCount: number,\n    public bigendian?: boolean\n  ) {\n    this.length = this.elementCount;\n  }\n\n  readUInt(buffer: Uint8Array, pos: number, bigendian?: boolean) {\n    const result = IntArray.readInt(buffer, pos, bigendian);\n    return result >>> 0;\n  }\n\n  static readInt(buffer: Uint8Array, pos: number, bigendian?: boolean) {\n    let result = 0;\n    if (bigendian) {\n      result =\n        (buffer[pos] << 24) |\n        (buffer[pos + 1] << 16) |\n        (buffer[pos + 2] << 8) |\n        buffer[pos + 3];\n    } else {\n      result =\n        (buffer[pos + 3] << 24) |\n        (buffer[pos + 2] << 16) |\n        (buffer[pos + 1] << 8) |\n        buffer[pos];\n    }\n    return result;\n  }\n\n  get(offset: number) {\n    const pos = this.pos + offset * 4;\n    return IntArray.readInt(this.buffer, pos, this.bigendian);\n  }\n}\n\nexport class ShortArray {\n  constructor(\n    public buffer: Uint8Array,\n    public pos: number,\n    public elementCount: number,\n    public bigendian?: boolean\n  ) {}\n\n  static readUShort(buffer: Uint8Array, pos: number, bigendian?: boolean) {\n    let result = 0;\n    if (bigendian) {\n      result = (buffer[pos] << 8) | buffer[pos + 1];\n    } else {\n      result = (buffer[pos + 1] << 8) | buffer[pos];\n    }\n    return result;\n  }\n\n  static readShort(buffer: Uint8Array, pos: number, bigendian?: boolean) {\n    let result = ShortArray.readUShort(buffer, pos, bigendian);\n    if (result >= 0x8000) {\n      result -= 0x10000;\n    }\n    return result;\n  }\n\n  get(offset: number) {\n    const pos = this.pos + offset * 2;\n    return ShortArray.readShort(this.buffer, pos, this.bigendian);\n  }\n}\n\nexport class CharArray {\n  constructor(\n    public buffer: Uint8Array,\n    public pos: number,\n    public elementCount: number,\n    public bigendian?: boolean\n  ) {}\n\n  get(offset: number) {\n    const pos = this.pos + offset * 2;\n    return ShortArray.readUShort(this.buffer, pos, this.bigendian);\n  }\n}\n\nexport class ArrayBufferStream {\n  pos = 0;\n  constructor(public buffer: Uint8Array, public bigendian?: boolean) {}\n  getInt() {\n    const result = IntArray.readInt(this.buffer, this.pos, this.bigendian);\n    this.pos += 4;\n    return result;\n  }\n\n  getIntArray(elementCount: number) {\n    const array = new IntArray(\n      this.buffer,\n      this.pos,\n      elementCount,\n      this.bigendian\n    );\n    this.pos += elementCount * 4;\n    return array;\n  }\n\n  getShortArray(elementCount: number) {\n    const array = new ShortArray(\n      this.buffer,\n      this.pos,\n      elementCount,\n      this.bigendian\n    );\n    this.pos += elementCount * 2;\n    return array;\n  }\n\n  getCharArray(elementCount: number) {\n    const array = new CharArray(\n      this.buffer,\n      this.pos,\n      elementCount,\n      this.bigendian\n    );\n    this.pos += elementCount * 2;\n    return array;\n  }\n\n  getString(elementCount: number) {\n    const array = new CharArray(\n      this.buffer,\n      this.pos,\n      elementCount,\n      this.bigendian\n    );\n    let s = \"\";\n    for (let i = 0; i < elementCount; i++) {\n      s += String.fromCharCode(array.get(i));\n    }\n    this.pos += elementCount * 2;\n    return s;\n  }\n\n  size() {\n    return this.buffer.length;\n  }\n}\n\nexport function getIntArray(buffer: Uint8Array, bigendian?: boolean) {\n  const stream = new ArrayBufferStream(buffer, bigendian);\n  return stream.getIntArray(stream.size() / 4);\n}\n\nexport function getCharArray(buffer: Uint8Array, bigendian?: boolean) {\n  const stream = new ArrayBufferStream(buffer, bigendian);\n  return stream.getCharArray(stream.size() / 2);\n}\n"]}