{"version":3,"file":"worddic.js","sourceRoot":"","sources":["../src/worddic.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ArrayBufferStream,\n  getCharArray,\n  getIntArray,\n  ShortArray,\n  IntArray,\n  CharArray\n} from \"./util\";\nimport { Searcher } from \"./searcher\";\nimport { ViterbiNode } from \"./viterbinode\";\n\nexport class WordDic {\n  trie: Searcher;\n  data: CharArray;\n  indices: IntArray;\n  dataOffsets: IntArray;\n  leftIds: ShortArray;\n  rightIds: ShortArray;\n  costs: ShortArray;\n  constructor(\n    word2id: Buffer,\n    worddat: Buffer,\n    wordary: Buffer,\n    wordinf: Buffer,\n    bigendian?: boolean\n  ) {\n    this.trie = new Searcher(new Uint8Array(word2id), bigendian);\n    this.data = getCharArray(new Uint8Array(worddat), bigendian);\n    this.indices = getIntArray(new Uint8Array(wordary), bigendian);\n\n    const fmis = new ArrayBufferStream(new Uint8Array(wordinf), bigendian);\n    const wordCount = fmis.size() / (4 + 2 + 2 + 2);\n\n    //dataOffsets[単語ID] = 単語の素性データの開始位置\n    this.dataOffsets = fmis.getIntArray(wordCount);\n\n    //leftIds[単語ID] = 単語の左文脈ID\n    this.leftIds = fmis.getShortArray(wordCount);\n\n    //rightIds[単語ID] = 単語の右文脈ID\n    this.rightIds = fmis.getShortArray(wordCount);\n\n    //consts[単語ID] = 単語のコスト\n    this.costs = fmis.getShortArray(wordCount);\n  }\n\n  search(text: string, start: number, callback: (vn: ViterbiNode) => void) {\n    const { costs, leftIds, rightIds, indices } = this;\n\n    this.trie.eachCommonPrefix(\n      text,\n      start,\n      (start: number, offset: number, trieId: number) => {\n        const end = indices.get(trieId + 1);\n        for (let i = indices.get(trieId); i < end; i++) {\n          callback(\n            new ViterbiNode(\n              i,\n              start,\n              offset,\n              costs.get(i),\n              leftIds.get(i),\n              rightIds.get(i),\n              false\n            )\n          );\n        }\n      }\n    );\n  }\n\n  searchFromTrieId(\n    trieId: number,\n    start: number,\n    wordLength: number,\n    isSpace: boolean,\n    callback: any\n  ) {\n    const costs = this.costs;\n    const leftIds = this.leftIds;\n    const rightIds = this.rightIds;\n    const end = this.indices.get(trieId + 1);\n    for (let i = this.indices.get(trieId); i < end; i++) {\n      callback(\n        new ViterbiNode(\n          i,\n          start,\n          wordLength,\n          costs.get(i),\n          leftIds.get(i),\n          rightIds.get(i),\n          isSpace\n        )\n      );\n    }\n  }\n\n  wordData(wordId: number) {\n    const res = Array();\n    const start = this.dataOffsets.get(wordId);\n    const end = this.dataOffsets.get(wordId + 1);\n    for (let i = start; i < end; i++) {\n      res.push(String.fromCharCode(this.data.get(i)));\n    }\n    return res;\n  }\n}\n"]}