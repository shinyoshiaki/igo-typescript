{"version":3,"file":"node.js","sourceRoot":"","sources":["../src/node.ts"],"names":[],"mappings":";;AAAa,QAAA,IAAI,GAAG;IAClB,IAAI,EAAE;QACJ,gCAAgC;QAChC,oCAAoC;QACpC,EAAE,EAAE,UAAS,GAAW;YACtB,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;QAClB,CAAC;KACF;IAED,yBAAyB;IACzB,IAAI,EAAE;QACJ,gBAAgB;QAChB,4DAA4D;QAC5D,cAAc,EAAE,CAAC;QAEjB,+BAA+B;QAC/B,4DAA4D;QAC5D,WAAW,EAAE,CAAC;QAEd,aAAa;QACb,UAAU,EAAE,MAAM;QAClB,cAAc,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;KACvC;CACF,CAAC","sourcesContent":["export const Node = {\n  Base: {\n    //BASEノードに格納するID値をエンコードするためのメソッド\n    //BASEノードに格納されているID値をデコードするためにも用いられる\n    ID: function(nid: number) {\n      return -nid - 1;\n    }\n  },\n\n  //CHECKノード用の定数が定義されているクラス\n  Chck: {\n    //文字列の終端を表す文字コード\n    //この文字はシステムにより予約されており、辞書内の形態素の表層形および解析対象テキストに含まれていた場合の動作は未定義\n    TERMINATE_CODE: 0,\n\n    //CHECKノードが未使用だということを示すための文字コード\n    //この文字はシステムにより予約されており、辞書内の形態素の表層形および解析対象テキストに含まれていた場合の動作は未定義\n    VACANT_CODE: 1,\n\n    //使用可能な文字の最大値\n    CODE_LIMIT: 0xffff,\n    TERMINATE_CHAR: String.fromCharCode(0)\n  }\n};\n"]}