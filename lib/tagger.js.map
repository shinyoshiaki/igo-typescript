{"version":3,"file":"tagger.js","sourceRoot":"","sources":["../src/tagger.ts"],"names":[],"mappings":"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","sourcesContent":["import { WordDic } from \"./worddic\";\nimport { Unknown } from \"./unknown\";\nimport { Matrix } from \"./matrix\";\nimport { jsheap } from \"./jsheap\";\nimport { ViterbiNode } from \"./viterbinode\";\n\nclass Morpheme {\n  constructor(\n    public surface: string,\n    public feature: string,\n    public start: number\n  ) {}\n}\n\nexport class Tagger {\n  constructor(public wdc: WordDic, public unk: Unknown, public mtx: Matrix) {}\n\n  parse(text: string, result: Morpheme[] = []) {\n    let vn = this.getBestPath(this.parseImpl(text));\n    while (vn) {\n      const surface = text.substring(vn.start, vn.start + vn.length);\n      const feature = this.wdc.wordData(vn.wordId).join(\"\");\n      result.push(new Morpheme(surface, feature, vn.start));\n      vn = vn.prev;\n    }\n    return result;\n  }\n\n  parseNBest(text: string, best: number, results: Morpheme[][] = []) {\n    const vns = this.getNBestPath(this.parseImpl(text), best);\n    for (let i = 0; i < vns.length; ++i) {\n      let n = vns[i];\n      const result = [];\n      while (n) {\n        const vn = n.node;\n        if (vn.wordId != 0) {\n          const surface = text.substring(vn.start, vn.start + vn.length);\n          const feature = this.wdc.wordData(vn.wordId).join(\"\");\n          result.push(new Morpheme(surface, feature, vn.start));\n        }\n        n = n.next;\n      }\n      results.push(result);\n    }\n    return results;\n  }\n\n  wakati(text: string, result: string[] = []) {\n    let vn = this.getBestPath(this.parseImpl(text));\n    while (vn) {\n      const surface = text.substring(vn.start, vn.start + vn.length);\n      result.push(surface);\n      vn = vn.prev;\n    }\n    return result;\n  }\n\n  parseImpl(text: string) {\n    const length = text.length;\n    const nodesAry: ViterbiNode[][] = new Array(length + 1);\n    nodesAry[0] = [ViterbiNode.makeBOSEOS()];\n\n    const { wdc, unk } = this;\n    const tagger = this;\n\n    const ml = new MakeLattice(nodesAry, (vn: ViterbiNode, prevs) =>\n      tagger.setMincostNode(vn, prevs)\n    );\n\n    const fn = (vn: ViterbiNode) => {\n      ml.call(vn);\n    };\n    fn.isEmpty = () => ml.isEmpty();\n\n    for (let i = 0; i < length; i++) {\n      if (!nodesAry[i]) continue;\n      ml.set(i);\n      wdc.search(text, i, fn); //単語辞書から形態素を検索\n      if (unk) unk.search(text, i, wdc, fn); //未知語辞書から形態素を検索\n    }\n\n    nodesAry[length + 1] = [\n      this.setMincostNode(ViterbiNode.makeBOSEOS(), nodesAry[length])\n    ];\n    return nodesAry;\n  }\n\n  getBestPath(nedesAry: ViterbiNode[][]) {\n    let cur = nedesAry[nedesAry.length - 1][0].prev;\n    let head = undefined;\n    while (cur.prev) {\n      const tmp = cur.prev;\n      cur.prev = head as any;\n      head = cur;\n      cur = tmp;\n    }\n    return head;\n  }\n\n  getNBestPath(nedesAry: ViterbiNode[][], best: number) {\n    const mtx = this.mtx;\n    const bests = [];\n    const heap = new jsheap((a: any, b: any) => {\n      return a.predict_cost < b.predict_cost;\n    });\n    const eos = nedesAry[nedesAry.length - 1][0];\n    heap.push({ node: eos, cost: 0, predict_cost: eos.cost, next: undefined });\n    while (!heap.empty() && bests.length < best) {\n      const n = heap.top();\n      heap.pop();\n      if (n.node.wordId == 0 && n.next) {\n        bests.push(n);\n        continue;\n      }\n\n      const leftId = n.node.leftId;\n      const prevs = n.node.prevs;\n      for (let i = 0; i < prevs.length; ++i) {\n        const cost =\n          n.cost + mtx.linkCost(prevs[i].rightId, leftId) + n.node.nodecost;\n        heap.push({\n          node: prevs[i],\n          cost: cost,\n          predict_cost: cost + prevs[i].cost,\n          next: n\n        });\n      }\n    }\n    return bests;\n  }\n\n  setMincostNode(vn: ViterbiNode, prevs: ViterbiNode[]) {\n    const mtx = this.mtx;\n    const leftId = vn.leftId;\n    const f = prevs[0];\n    vn.prev = prevs[0];\n    let minCost = f.cost + mtx.linkCost(f.rightId, leftId);\n\n    for (let i = 1; i < prevs.length; i++) {\n      const p = prevs[i];\n      const cost = p.cost + mtx.linkCost(p.rightId, leftId);\n      if (cost < minCost) {\n        minCost = cost;\n        vn.prev = p;\n      }\n    }\n    vn.prevs = prevs;\n    vn.cost += minCost;\n    return vn;\n  }\n}\n\nclass MakeLattice {\n  i: number;\n  prevs: ViterbiNode[];\n  empty: boolean;\n  constructor(\n    public nodesAry: ViterbiNode[][],\n    public setMincostNode: (\n      vn: ViterbiNode,\n      prevs: ViterbiNode[]\n    ) => ViterbiNode\n  ) {\n    this.i = 0;\n    this.prevs = undefined as any;\n    this.empty = true;\n  }\n\n  set(i: number) {\n    this.i = i;\n    this.prevs = this.nodesAry[i];\n    this.nodesAry[i] = undefined as any;\n    this.empty = true;\n  }\n\n  call(vn: ViterbiNode) {\n    this.empty = false;\n    const nodesAry = this.nodesAry;\n    const end = this.i + vn.length;\n    let ends = nodesAry[end] || [];\n    if (vn.isSpace) {\n      ends = ends.concat(this.prevs);\n    } else {\n      ends.push(this.setMincostNode(vn, this.prevs));\n    }\n    nodesAry[end] = ends;\n  }\n\n  isEmpty() {\n    return this.empty;\n  }\n}\n"]}