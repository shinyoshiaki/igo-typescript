{"version":3,"file":"charcategory.js","sourceRoot":"","sources":["../src/charcategory.ts"],"names":[],"mappings":";;AAAA,+BAAkE;AAClE,uCAAsC;AAEtC;IAIE,sBAAY,aAAkB,EAAE,YAAiB,EAAE,SAAe;QAChE,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,cAAc,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QACvE,IAAM,IAAI,GAAG,IAAI,wBAAiB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,+BAAQ,GAAR,UAAS,IAAY;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IACD,mCAAY,GAAZ,UAAa,KAAa,EAAE,KAAa;QACvC,OAAO,CACL,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,CACF,CAAC;IACJ,CAAC;IACM,2BAAc,GAArB,UAAsB,MAAW,EAAE,SAAc;QAC/C,IAAM,IAAI,GAAG,kBAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7B,IAAM,GAAG,GAAG,EAAE,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC7B,GAAG,CAAC,IAAI,CACN,IAAI,mBAAQ,CACV,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EACf,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EACnB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EACxB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CACzB,CACF,CAAC;SACH;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IACH,mBAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,oCAAY","sourcesContent":["import { getIntArray, ArrayBufferStream, IntArray } from \"./util\";\nimport { Category } from \"./category\";\n\nexport class CharCategory {\n  categories: Category[];\n  char2id: IntArray;\n  eqlMasks: IntArray;\n  constructor(code2category: any, charcategory: any, bigendian?: any) {\n    this.categories = CharCategory.readCategories(charcategory, bigendian);\n    const fmis = new ArrayBufferStream(code2category, bigendian);\n    this.char2id = fmis.getIntArray(fmis.size() / 4 / 2);\n    this.eqlMasks = fmis.getIntArray(fmis.size() / 4 / 2);\n  }\n\n  category(code: string) {\n    return this.categories[this.char2id.get(code.charCodeAt(0))];\n  }\n  isCompatible(code1: string, code2: string) {\n    return (\n      (this.eqlMasks.get(code1.charCodeAt(0)) &\n        this.eqlMasks.get(code2.charCodeAt(0))) !=\n      0\n    );\n  }\n  static readCategories(buffer: any, bigendian: any) {\n    const data = getIntArray(buffer, bigendian);\n    const size = data.length / 4;\n    const ary = [];\n    for (let i = 0; i < size; i++) {\n      ary.push(\n        new Category(\n          data.get(i * 4),\n          data.get(i * 4 + 1),\n          data.get(i * 4 + 2) == 1,\n          data.get(i * 4 + 3) == 1\n        )\n      );\n    }\n    return ary;\n  }\n}\n"]}